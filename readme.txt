Memento ( Object Behavioural )
- เราสามารเก็บสถานะของ Object เพื่อจุดประสงค์บางอย่าง เช่น เกม Emulator ยุคเก่าๆ มีการ save state ก่อนตาย, system restore ของ Window
- ทำ check point เอาไว้
- ทำแล้วห้ามผิดหลัก Encapsulation

ข้อดี
- เก็บสถานะก่อนหน้าได้โดยที่ไม่จำเป็นต้องรู้การทำงานภายใน ( ตามหลัก Encapsulation )
- สถานะต่างๆเราจะเห็นแค่ที่จำเป็น ( Object ไม่ต้องเก็บการทำงาน เก็บแค่ข้อมูลพอ )

ข้อเสีย
- การจัดเก็บมีขนาดใหญ่มาก เพราะ มันเก็บทุกอย่าง 
- ค่าใช้จ่ายแพงมาก
- เวลาในการคืนนานมาก (system restore ของ Window นานเป็นชั่วโมง)

Prototype ( Object Creational )
- ปัจจุบัน Object มีสถานะอะไร ให้ copy ไว้
- Prototype จะเป็นการสร้าง clone ของ Object ขึ้นมา
- ใช้เมื่อมีอะไรบางอย่าง เมื่อ runtime ผ่านไปแล้วอยากเก็บสถานะนั้นเอาไว้โดยการ copy ทั้ง Object
- ใช้ร่วมกับ Memento ได้ แต่มีข้อเสีย คือ ค่าใช้จ่ายได้การเก็บแพงขึ้นอีก

ข้อดี
- เมื่อเราอยากมี Object อยู่ตอน runtime เราสามารถเก็บสถานะไว้ได้
- รองรับการทำงานของ Object หลายๆแบบ
- ตัวอย่าง   
=> เกมยานยิง กดยิง 1 ครั้ง สร้าง Object ใหม่ 1 ตัว แต่ผู้เล่นมักกดยิงรัวๆ (ทำให้ overhead ได้)
=> มี Object หนึ่งจัวอยู่นอกจอ แล้วทำการ clone มาที่ปลายกระบอกปืน

ข้อเสีย
- เราเป็นคนจัดการ clone เอง จะรู้ได้ไงว่าจัดการถูก ???
- 

Singleton ( Object Creational )
- เรียกใช้ Object ได้โดยไม่ต้องรู้ว่าถูก initiate รึยัง เช่น เกม มาริโอ จะทำอยากไรให้เรียก Object ศรัตรูได้โดยไม่ต้องรู้ว่าถูก new มาก่อนไหม
- เพื่อให้มันใจว่า Object ใดถูกเรียกมาจากหลายทางได้โดยที่เราต้องการให้มันมีตัวเดียว(ตัวหลักตัวเดิม) ที่ไม่ใช่ตัว copy หรือตัวอื่นๆ

ข้อดี
- มั่นใจว่ามี Object ตัวเดียว
- เรียกใช้เมื่อไหรก็ได้
- มีความยืดหยุ่นในการทำงาน

ข้อเสีย
- Singleton เป็น lazy initiation 
- มีปัญหา memory leak เช่น ถ้าเป็นโปรแกรมที่ต้องการ performance สูงๆ จะไม่การันตีว่า Run ไปแล้วจะอยู่ตลอดไป
- ถ้าใช้ Singleton ใน java เยอะ memory เต็มแน่นอน
